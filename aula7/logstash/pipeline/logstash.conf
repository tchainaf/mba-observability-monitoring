input {
  # Input para logs do Nginx
  file {
    path => "/var/log/nginx/access.log"
    start_position => "beginning"
    tags => ["nginx", "access"]
    codec => "json"
  }
  
  file {
    path => "/var/log/nginx/error.log"
    start_position => "beginning"
    tags => ["nginx", "error"]
  }
  
  # Input para receber logs via Beats
  beats {
    port => 5044
    tags => ["beats"]
  }
}

filter {
  # Processamento de logs de acesso do Nginx
  if "nginx" in [tags] and "access" in [tags] {
    grok {
      match => { 
        "message" => "%{NGINXACCESS}" 
      }
    }
    
    # Parse do timestamp
    date {
      match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
    }
    
    # Conversão de tipos
    mutate {
      convert => { 
        "response" => "integer"
        "bytes" => "integer"
        "responsetime" => "float"
      }
    }
    
    # GeoIP para localização baseada no IP
    geoip {
      source => "clientip"
      target => "geoip"
    }
    
    # Parse do User Agent
    useragent {
      source => "agent"
      target => "useragent"
    }
    
    # Adicionar informações de classificação de status HTTP
    if [response] >= 200 and [response] < 300 {
      mutate { add_field => { "status_class" => "success" } }
    } else if [response] >= 300 and [response] < 400 {
      mutate { add_field => { "status_class" => "redirect" } }
    } else if [response] >= 400 and [response] < 500 {
      mutate { add_field => { "status_class" => "client_error" } }
    } else if [response] >= 500 {
      mutate { add_field => { "status_class" => "server_error" } }
    }
  }
  
  # Processamento de logs de erro do Nginx
  if "nginx" in [tags] and "error" in [tags] {
    grok {
      match => { 
        "message" => "%{NGINXERROR}" 
      }
    }
    
    date {
      match => [ "timestamp", "yyyy/MM/dd HH:mm:ss" ]
    }
  }
  
  # Enriquecimento comum para todos os logs
  mutate {
    add_field => { 
      "[@metadata][index_prefix]" => "logstash-nginx"
      "environment" => "development"
      "application" => "nginx-web-server"
    }
  }
  
  # Remover campos desnecessários
  mutate {
    remove_field => [ "host", "agent" ]
  }
}

output {
  # Output para Elasticsearch com índices dinâmicos
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "%{[@metadata][index_prefix]}-%{+YYYY.MM.dd}"
    template_name => "nginx-logs"
    template => "/usr/share/logstash/templates/nginx-template.json"
    template_overwrite => true
  }
  
  # Output para debug (remover em produção)
  if [loglevel] == "debug" {
    stdout { 
      codec => rubydebug 
    }
  }
} 